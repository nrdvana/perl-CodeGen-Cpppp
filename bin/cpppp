#! /usr/bin/env perl
# VERSION
# PODNAME: cpppp
use strict;
use warnings;
use CodeGen::Cpppp;
use autouse 'Pod::Usage' => 'pod2usage';
use Getopt::Long;

=head1 USAGE

Transform perl+C source into C

  cpppp [OPTIONS] < file.cp > file.c

=head1 OPTIONS

None yet!  but eventually will support many that C<cpp> has, for defining things and parsing
headers to discover existing types.

=cut

GetOptions(
   '--help' => sub { pod2usage(1) },
) or pod2usage(2);

if (@ARGV) {
   for (@ARGV) {
      open my $fh, '<:utf8', $_ or die "open($_): $!";
      print CodeGen::Cpppp->new()->compile_template($fh, $_)->new->render;
   }
} else {
   print CodeGen::Cpppp->new()->compile_template(\*STDIN, 'stdin')->new->render;
}
