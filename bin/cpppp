#! /usr/bin/env perl
# PODNAME: cpppp
# VERSION
# ABSTRACT: Command line tool to process cpppp templates
use v5.20;
use warnings;
use experimental 'signatures';
use CodeGen::Cpppp;
use autouse 'Pod::Usage' => 'pod2usage';
use Getopt::Long;

=head1 USAGE

Transform perl+C source into C

  cpppp [OPTIONS] < file.cp > file.c

=head1 OPTIONS

=over

=item C<--dump-pl>

Output the generated perl sourcecode for the top-level perl script and don't
execute it.

=back

eventually will support many that C<cpp> has, for defining things and parsing
headers to discover existing types.

=cut

my $opt_action;
GetOptions(
   '--dump-pl'               => sub { $opt_action= 'dump_template_perl' },
   '--help'                  => sub { pod2usage(1) },
   '--version'               => sub { say CodeGen::Cpppp->VERSION },
) or pod2usage(2);

my $cpppp= CodeGen::Cpppp->new(
   action => $opt_action // 'render',
);

if (@ARGV) {
   $cpppp->process($_) for @ARGV;
} else {
   $cpppp->process(\*STDIN, 'stdin');
}
